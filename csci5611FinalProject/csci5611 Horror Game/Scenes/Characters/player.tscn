[gd_scene load_steps=5 format=3 uid="uid://dhppbqwwkxb6q"]

[sub_resource type="GDScript" id="GDScript_qs4nq"]
script/source = "extends CharacterBody3D


const SPEED = 5.0
const JUMP_VELOCITY = 2.5
const SENSITIVITY = 0.003
const MAX_STAMINA = 1.5
const REST_TIME = 2.
const MAX_BATTERY = 10


var stamina = MAX_STAMINA
var rest = REST_TIME
var curBattery = MAX_BATTERY
var flashlight_on = true

var coins_collected = 0

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

@onready var head = $Head
@onready var camera = $Head/Camera3D
@onready var stamina_bar = $GUI/ProgressBar
@onready var battery_power = $GUI/lightBar
@onready var flashlight = $Head/Camera3D/headLight

@onready var rCollect = $GUI/redcollect
@onready var bCollect = $GUI/bluecollect
@onready var gCollect = $GUI/greencollect





func _on_red_collected():
	rCollect.value = 100
	coins_collected += 1
	open_exit()
	
func _on_blue_collected():
	bCollect.value = 100
	coins_collected += 1
	open_exit()
	
func _on_green_collected():
	gCollect.value = 100
	coins_collected += 1
	open_exit()
	
	
signal exitOpen
func open_exit():
	if coins_collected == 3:
		emit_signal(\"exitOpen\")






func _ready():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED)

func _unhandled_input(event):
	if event is InputEventMouseMotion:
		head.rotate_y(-event.relative.x * SENSITIVITY)
		camera.rotate_x(-event.relative.y * SENSITIVITY)
		camera.rotation.x = clamp(camera.rotation.x, deg_to_rad(-40), deg_to_rad(60))

func get_sprint_speed(is_moving, is_sprinting, delta):
	if (stamina > 0 and is_sprinting and is_moving):
		rest = 0
		stamina -= delta
	elif (not is_sprinting or not is_moving):
		if (rest >= REST_TIME):
			if (stamina < MAX_STAMINA): stamina += delta
			if (stamina > MAX_STAMINA): stamina = MAX_STAMINA
		else:
			rest += delta
		is_sprinting = false
	else:
		is_sprinting = false
	return SPEED * (float(is_sprinting) + 1)

func _physics_process(delta):
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle Jump.
	if Input.is_action_just_pressed(\"jump\") and is_on_floor():
		velocity.y = JUMP_VELOCITY

	if Input.is_action_just_pressed(\"flashlight\"):
		flashlight_on = !flashlight_on


	if(flashlight_on):
		if(curBattery <= 0):
			flashlight.light_energy = 0
		else:
			curBattery -= delta/20
			flashlight.light_energy = 15
	else:
		flashlight.light_energy = 0


	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir = Input.get_vector(\"left\", \"right\", \"forward\", \"backward\")
	var direction = (head.transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()

	var move_speed = get_sprint_speed(direction, Input.is_action_pressed(\"sprint\"), delta)



	#update velocities
	if direction:

		velocity.x = direction.x * move_speed
		velocity.z = direction.z * move_speed
	else:
		velocity.x = 0.0 #move_toward(velocity.x, 0, SPEED)
		velocity.z = 0.0 #move_toward(velocity.z, 0, SPEED)

	move_and_slide()

	stamina_bar.value = 100 * stamina / MAX_STAMINA
	battery_power.value = 100 * curBattery / MAX_BATTERY




func _on_battery_charge_battery():
	curBattery += 20
	if curBattery > 100:
		curBattery = 100


func _on_final_platform_finish():
	stamina_bar.queue_free()
	battery_power.queue_free()
	
"

[sub_resource type="CapsuleMesh" id="CapsuleMesh_6djcv"]

[sub_resource type="ConvexPolygonShape3D" id="ConvexPolygonShape3D_ssd7a"]
points = PackedVector3Array(-0.125207, -0.532801, -0.480507, 0.0227831, 0.47607, 0.498884, 0.169713, 0.559144, 0.464172, 0.231051, -0.803591, 0.320455, 0.40741, 0.651043, -0.243523, -0.482789, 0.594843, 0.0822132, -0.362868, -0.682312, 0.289697, 0.469044, -0.654529, -0.0662713, -0.127444, 0.842701, -0.338103, -0.393435, -0.683942, -0.244717, 0.438255, 0.623309, 0.200849, 0.0841477, 0.977454, 0.114795, -0.0682023, -0.976458, -0.12927, 0.20055, -0.563129, -0.451454, -0.185527, 0.595453, -0.453475, -0.273363, 0.592268, 0.407754, -0.00693649, -0.476823, 0.49966, 0.375821, -0.588614, 0.316955, 0.111579, 0.563059, -0.481177, -0.41725, 0.527866, -0.270497, -0.484546, -0.596972, -0.0665097, -0.279747, 0.908561, 0.0533361, -0.250197, -0.880712, 0.205319, 0.263647, -0.902771, -0.127394, 0.293368, 0.871526, -0.157196, 0.373412, -0.526319, -0.328246, 0.499663, 0.476641, -0.00688856, 0.0531056, 0.875001, 0.324703, -0.154543, -0.590854, 0.465879, -0.0972799, -0.782358, -0.398188, -0.387649, -0.498171, 0.31565, -0.30068, -0.587995, -0.388901)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_sgc4l"]

[node name="Player" type="CharacterBody3D"]
collision_layer = 2
script = SubResource("GDScript_qs4nq")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
mesh = SubResource("CapsuleMesh_6djcv")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0)
shape = SubResource("ConvexPolygonShape3D_ssd7a")

[node name="Head" type="Node3D" parent="."]

[node name="Camera3D" type="Camera3D" parent="Head"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.44256, 0)
current = true

[node name="headLight" type="SpotLight3D" parent="Head/Camera3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.424012, -0.705912, 0)
light_color = Color(0.364706, 0.364706, 0.364706, 1)
light_energy = 15.0
distance_fade_begin = 20.0
spot_range = 47.0
spot_attenuation = 1.36604
spot_angle = 20.4564
spot_angle_attenuation = 2.0

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.11487, 0)
light_color = Color(0.286275, 0.286275, 0.286275, 1)
light_energy = 5.0
omni_range = 6.0
omni_attenuation = 0.517632

[node name="GUI" type="CanvasLayer" parent="."]

[node name="ProgressBar" type="ProgressBar" parent="GUI"]
modulate = Color(1, 1, 0.258824, 1)
offset_left = 16.0
offset_top = 600.0
offset_right = 256.0
offset_bottom = 627.0
theme_override_styles/background = SubResource("StyleBoxFlat_sgc4l")
value = 50.0
show_percentage = false

[node name="lightBar" type="ProgressBar" parent="GUI"]
modulate = Color(1, 1, 0.0705882, 1)
offset_left = 50.0
offset_top = 75.0
offset_right = 220.0
offset_bottom = 175.0
scale = Vector2(0.75, 0.75)
value = 50.0

[node name="redcollect" type="ProgressBar" parent="GUI"]
modulate = Color(1, 0, 0, 1)
show_behind_parent = true
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -52.0
offset_top = 75.0
offset_right = -32.0
offset_bottom = 102.0
grow_horizontal = 0
show_percentage = false

[node name="bluecollect" type="ProgressBar" parent="GUI"]
modulate = Color(0, 0, 1, 1)
show_behind_parent = true
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -52.0
offset_top = 105.0
offset_right = -32.0
offset_bottom = 132.0
grow_horizontal = 0
show_percentage = false

[node name="greencollect" type="ProgressBar" parent="GUI"]
modulate = Color(0, 0.32549, 0, 1)
show_behind_parent = true
anchors_preset = 1
anchor_left = 1.0
anchor_right = 1.0
offset_left = -52.0
offset_top = 135.0
offset_right = -32.0
offset_bottom = 162.0
grow_horizontal = 0
show_percentage = false
